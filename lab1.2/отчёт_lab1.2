Отчёт по задаче вычисления множества Мандельброта с исользованием std::thread на языке C++

1. Описание алгоритма:
   
   Основные моменты кода:
   
      1. Ввод и вывод: Используется std::cout для вывода сообщений в консоль и std::ofstream для работы с файлами.
      2. Комплексные числа: Используется std::complex<double> для работы с комплексными числами, что упрощает реализацию алгоритма.
      3. Потоки: Используются std::thread для создания потоков, что позволяет выполнять вычисления параллельно.
      4. Мьютексы: std::mutex и std::lock_guard используются для безопасного доступа к файлу при записи из нескольких потоков.
      5. Хронометраж: std::chrono используется для измерения времени выполнения программы.
   
   Программа вычисляет множество Мандельброта, определяя, какие комплексные числа c
   принадлежат этому множеству. Для этого используется итеративная формула zn+1 = zn^2 + c, 
   начиная с z0 = 0. Программа принимает два аргумента командной строки: 
   количество потоков (nthreads) и количество точек (npoints) для оценки. 
   Каждому потоку назначается своя часть комплексной плоскости, и каждый поток проверяет, 
   принадлежит ли соответствующая точка множеству Мандельброта, используя функцию isInMandelbrot. 
   Результаты сохраняются в CSV-файл с координатами точек, принадлежащих множеству Мандельброта.

2. Оценка времени работы:
   
   Время работы программы измеряется с помощью std::chrono::high_resolution_clock, 
   которая фиксирует начало и конец вычислений. Программа выводит время выполнения 
   в секундах после завершения всех потоков.

3. Ускорение и эффективность разработанной программы:
   
   Для оценки ускорения и эффективности программы были проведены тесты с различными значениями 
   количества потоков и объемом входных данных. Результаты тестирования представлены ниже:

   | nthreads | npoints | Время выполнения (сек) |
   |----------|---------|------------------------|
   | 1        | 100     | 4.16769                |
   | 4        | 100     | 4.04683                |
   | 4        | 1000    | 17.3792                |
   | 8        | 1000    | 13.9637                |
   | 3        | 2000    | 34.9487                |
   | 6        | 2000    | 28.7048                |
   | 9        | 2000    | 22.2493                |
   | 3        | 500     | 8.82049                |
   | 7        | 500     | 6.78246                |
   | 16       | 10000   | 101.888                |

   Для оценки ускорения и эффективности можно использовать следующие формулы:
   - Ускорение (S) = Время последовательной программы / Время параллельной программы
   - Эффективность (E) = Ускорение / Количество потоков

   Например, для теста с 4 потоками и 1000 точками:
   - Время последовательной программы (1 поток): 17.3792 секунд.
   - Время параллельной программы (4 потока): 4.04683 секунд.
   - Ускорение: S = 17.3792 / 4.04683 ≈ 4.295
   - Эффективность: E = 4.295 / 4 ≈ 1.07375

4. Анализ полученных результатов:
   
   Полученные результаты показывают, что при увеличении количества потоков время выполнения программы 
   не всегда уменьшается пропорционально. Это может быть связано с накладными расходами на создание и 
   управление потоками, а также с неравномерным распределением нагрузки между потоками. Например, 
   при увеличении числа потоков с 4 до 8 для 1000 точек время выполнения значительно сократилось, 
   но при увеличении до 16 потоков для 10000 точек время выполнения увеличилось, что указывает 
   на возможные проблемы с накладными расходами и эффективностью использования ресурсов.

5. Выводы:
   
  Параллельная программа для вычисления множества Мандельброта на C++ с использованием std::thread 
  позволяет значительно ускорить вычисления по сравнению с последовательной программой. 
  Однако её эффективность зависит от количества потоков и объема входных данных. 
  Для достижения максимальной эффективности необходимо тщательно настраивать параметры программы, 
  такие как количество потоков и размер вычисляемой области, а также учитывать накладные расходы на 
  управление потоками. 